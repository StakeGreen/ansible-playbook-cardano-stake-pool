#!/bin/bash

source ~/env_vars.sh

# Thanks to tech2help for creating this script! See: https://github.com/Techs2Help/leadership-schedule_check

# cardano node directory
DIRECTORY=${CNODE_HOME}/scripts/leadership_schedule

if [[ ! -d "$DIRECTORY/logs" ]]; then mkdir $DIRECTORY/logs; fi

# create a pid, this way you can ps aux | grep leaderScheduleCheck.sh to see if script is running
echo $$ > "$DIRECTORY/logs/leaderScheduleCheck.pid";

# Set your own stake pool ID
STAKE_POOL_ID=$(cat $KEYS_DIR/stakepoolid.txt)
BYRON_GENESIS_FILE=${CNODE_HOME}/configuration/{{ cardano_byron_genesis_filename }}
SHELLEY_GENESIS_FILE=${CNODE_HOME}/configuration/{{ cardano_shelley_genesis_filename }}
TESTNET="testnet"
MAINNET="mainnet"
SLACK_WEBHOOK_URL={{ slack_leadership_webhook_url }}

# Edit variable with $TESTNET for Testnet and $MAINNET for Mainnet
network=$MAINNET

# check for vrf.skey presence
if [[ ! -f "$KEYS_DIR/vrf.skey" ]]; then echo "vrf.skey not found"; exit 127; fi

CCLI=$(which cardano-cli)
if [[ -z $CCLI ]]; then echo "cardano-cli command cannot be found, exiting..."; exit 127; fi

JQ=$(which jq)
if [[ -z $JQ ]]; then echo "jq command cannot be found, exiting..."; exit 127; fi

read -ra BYRON_GENESIS <<< "$(jq -r '[ .startTime, .protocolConsts.k, .blockVersionData.slotDuration ] |@tsv' < $BYRON_GENESIS_FILE)"
if [[ -z $BYRON_GENESIS ]]; then echo "BYRON GENESIS config file not loaded correctly"; exit 127; fi

network_magic=""
if [ $network = $TESTNET ]; then
	network_magic="--testnet-magic 1097911063"
elif [ $network = $MAINNET ]; then
	network_magic="--mainnet"
else
	echo "Incorrect network selected, please use $TESTNET or $MAINNET network type"; exit 1
fi


# Check that node is synced
function isSynced(){
	isSynced=false

	sync_progress=$($CCLI query tip $network_magic | jq -r ".syncProgress")
	if [[ $sync_progress == "100.00" ]]; then
		isSynced=true
	fi

	echo $isSynced
}

# Get current epoch
function getCurrentEpoch(){
	echo $($CCLI query tip $network_magic | jq -r ".epoch")
}

# Get epoch start time based on current one
function getEpochStartTime(){
	byron_genesis_start_time=${BYRON_GENESIS[0]}
	byron_k=${BYRON_GENESIS[1]}
	byron_epoch_length=$(( 10 * byron_k ))
	byron_slot_length=${BYRON_GENESIS[2]}

	echo $(( $byron_genesis_start_time + (($(getCurrentEpoch) * $byron_epoch_length * $byron_slot_length) / 1000) ))
}

# Get epoch end time based on the current one
function getEpochEndTime(){
	#calculate currentEpoch Start time + 5 days of epoch duration
	echo $(( $(getEpochStartTime)+(5*86400) ))
}

# Get current timestamp
function getCurrentTime(){
	echo $(printf '%(%s)T\n' -1)
}

# Convert timestamps to UTC time
function timestampToUTC(){
	timestamp=$1
	echo $(date +"%D %T" -ud @$timestamp)
}

# Find the correct time to run the leaderslot check command
function getLeaderslotCheckTime(){
	epochStartTime=$(getEpochStartTime)
	epochEndTime=$(getEpochEndTime)

	# epoch completion percent to check for --next epoch leaderslots
	percentage=70
	checkTimestamp=$(( $epochStartTime+($percentage*($epochEndTime-$epochStartTime)/100) ))

	echo $checkTimestamp
}

# Function to make the script sleep until check need to be executed
function sleepUntil(){
	sleepSeconds=$1
	if [[ $sleepSeconds -gt 0 ]]; then
		echo "Script is going to sleep for: $sleepSeconds seconds"
		sleep $sleepSeconds
	fi
}

# Check leaderschedule of next epoch
function checkLeadershipSchedule(){
	next_epoch=$(( $(getCurrentEpoch)+1 ))
	currentTime=$(getCurrentTime)

    echo "Check is running at: $(timestampToUTC $currentTime) for epoch: $next_epoch"
	$CCLI query leadership-schedule $network_magic --genesis $SHELLEY_GENESIS_FILE --stake-pool-id $STAKE_POOL_ID --vrf-signing-key-file "$KEYS_DIR/vrf.skey" --next > "$DIRECTORY/logs/leaderSchedule_$next_epoch.txt"
    if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
        curl -X POST -H 'Content-type: application/json' --data '{"text": "'"$(cat $DIRECTORY/logs/leaderSchedule_$next_epoch.txt)"'"}' $SLACK_WEBHOOK_URL
    else
        echo "Slack webhook url not defined, not sharing data."
    fi
}

if [ isSynced ];then
	echo "Current epoch: $(getCurrentEpoch)"

	epochStartTimestamp=$(getEpochStartTime)
	echo "Epoch start time: $(timestampToUTC $epochStartTimestamp)"

	epochEndTimestamp=$(getEpochEndTime)
	echo "Epoch end time: $(timestampToUTC $epochEndTimestamp)"

	currentTime=$(getCurrentTime)
	echo "Current cron execution time: $(timestampToUTC $currentTime)"

	timestampCheckLeaders=$(getLeaderslotCheckTime)
	echo "Next check time: $(timestampToUTC $timestampCheckLeaders)"

	timeDifference=$(( $timestampCheckLeaders-$currentTime ))
	if [ -f "$DIRECTORY/logs/leaderSchedule_$(( $(getCurrentEpoch)+1 )).txt" ]; then
        echo "Check already done, check logs for results"; exit 1
	elif [[ $timeDifference -gt -1 ]]; then
        echo "Too early to run the script, wait for next cron scheduled job"; exit 1
	elif [[ $timeDifference -lt 0 ]] && [ ! -f "$DIRECTORY/logs/leaderSchedule_$(( $(getCurrentEpoch)+1 )).txt" ]; then
        echo "Check is starting on $(timestampToUTC $(getCurrentTime))"
        checkLeadershipSchedule
        echo "Script ended, schedule logged inside file: leaderSchedule_$(( $(getCurrentEpoch)+1 )).txt"
	else
		echo "There were problems on running the script, check that everything is working fine"; exit 1
	fi
else
	echo "Node not fully synced."; exit 1
fi
